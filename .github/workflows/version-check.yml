name: Smart Auto-Versioning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  smart-version:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '🤖 Auto-bump version')
    runs-on: ubuntu-latest
    name: Smart Version Analysis & Auto-Bump
    permissions:
      contents: write
    
    steps:
    - name: Get GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.VERSIONING_APP_ID }}
        private-key: ${{ secrets.VERSIONING_APP_PRIVATE_KEY }}
        
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install hatch
        hatch env create ci
        
    - name: Intelligent Version Analysis
      id: analyze
      run: hatch env run --env ci python .github/scripts/analyze_version.py
        
    - name: Handle skipped analysis
      if: steps.analyze.outputs.should-skip == 'true'
      run: |
        echo "ℹ️  Versioning analysis was skipped"
        SKIP_REASON="${{ steps.analyze.outputs.skip-reason }}"
        echo "📋 Reason: $SKIP_REASON"
        case "$SKIP_REASON" in
          "bot-commit")
            echo "🤖 This commit was made by the versioning bot, skipping to prevent infinite loops"
            ;;
          "env-variable")
            echo "🛑 SKIP_VERSIONING environment variable is set"
            ;;
          "update-failed")
            echo "❌ Version file update failed"
            exit 1
            ;;
          "")
            echo "⚠️  Skip reason not provided"
            ;;
          *)
            echo "ℹ️  Analysis skipped for unknown reason: $SKIP_REASON"
            ;;
        esac
        
    - name: Commit and push version bump directly to main
      if: steps.analyze.outputs.should-skip != 'true'
      run: |
        git config user.name "smart-versioning[bot]"
        git config user.email "smart-versioning[bot]@users.noreply.github.com"
        git add backend/global_economy_sim/__about__.py
        git commit -m "🤖 Auto-bump version ${{ steps.analyze.outputs.old-version }} → ${{ steps.analyze.outputs.new-version }} (${{ steps.analyze.outputs.bump-type }})"
        
        # Push directly to main (bypasses branch protection with GitHub App token)
        git push origin main
        echo "✅ Version bump pushed directly to main: ${{ steps.analyze.outputs.old-version }} → ${{ steps.analyze.outputs.new-version }}"
        
    - name: Create and push tag
      if: steps.analyze.outputs.should-skip != 'true'
      run: |
        git config user.name "smart-versioning[bot]"
        git config user.email "smart-versioning[bot]@users.noreply.github.com"
        git tag -a "v${{ steps.analyze.outputs.new-version }}" -m "🤖 Smart auto-release v${{ steps.analyze.outputs.new-version }}"
        git push origin "v${{ steps.analyze.outputs.new-version }}"
        echo "✅ Created and pushed tag v${{ steps.analyze.outputs.new-version }}"
        
    - name: Create summary
      if: steps.analyze.outputs.should-skip != 'true'
      run: |
        cat version_summary.txt >> $GITHUB_STEP_SUMMARY

  smart-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    name: Create Release
    permissions:
      contents: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install Hatch
      run: pip install hatch
      
    - name: Build package
      run: hatch build
      
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from recent commits
        cat << EOF > release_notes.md
        ## 🚀 Global Economy Simulation v$VERSION
        
        > *This release was automatically created by smart AI-powered version analysis*
        
        ### What's Changed
        
        $(git log --pretty=format:"- %s (%an)" $(git describe --tags --abbrev=0 HEAD^)..HEAD | head -10)
        
        ### Installation
        
        \`\`\`bash
        pip install global-economy-sim==$VERSION
        \`\`\`
        
        ### Development Setup
        
        \`\`\`bash
        git clone https://github.com/filip-herceg/economy-simulation.git
        cd economy-simulation
        hatch env create
        hatch shell
        \`\`\`
        
        **Full Changelog**: https://github.com/filip-herceg/economy-simulation/compare/$(git describe --tags --abbrev=0 HEAD^)...v$VERSION
        EOF
        
    - name: Create GitHub Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: "🤖 Smart Release v${{ steps.release-notes.outputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: false

  pr-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Preview Version Impact
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install hatch
        hatch env create ci
      
    - name: Analyze PR Impact
      run: hatch env run --env ci python .github/scripts/analyze_pr.py
        
    - name: Comment PR with preview
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('pr_summary.txt', 'utf8');
          
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.login === 'github-actions[bot]' && 
            comment.body.includes('🔮 Smart Version Preview')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
